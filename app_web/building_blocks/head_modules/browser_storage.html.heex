<%#...................................................... Description ........................................................
								                ........................... Purpose ..........................
- This component allows us to use the localstorage with some extras compared to the standard API:
	1) associate an expiration date to each value (by default localStorage has no expiry time);
	2) allow saving other data than strings (by default the values needs to be strings);

								                ...................... Render the component ..................
1) You have to "import AppWeb.BuildingBlocks" to the "layout.ex";
2) Copy this to where you want to use it (to the "head" of the "root.htmk.heex"):
											<.browser_storage />

								                ...................... Using the component ...................
This component makes available these Functions in the "globFuncs" object:
	a) globFuncs.locSto.set: saves data in the localStorage. Example:
			globFuncs.locSto.set("name",{value}, expirationTime, "timeUnits"):
				"name" - string;
				{value} - accepts any type (default is string);
				expirationTime - integer;
				"timeUnits" - one string from: "min"/"h"/"d"/"w"/"m"/"y", default being "m";
	b) globFuncs.locSto.get:  gets data from the localStorage. Example: globFuncs.locSto.get("name");
	c) globFuncs.locSto.remove: removes specific data from the localStorage. Example: globFuncs.locSto.remove("name");
	d) globFuncs.locSto.clear: removes all data from the localStorage. Example: globFuncs.locSto.clear();
	e) globFuncs.cookie.set: saves data in a cookie. Example:
      globFuncs.cookie.set("name",{value}, expirationTime, "timeUnits"):
            "name" - string;
            {value} - accepts any type (default is string);
            expirationTime - integer;
            "timeUnits" - one string from: "min"/"h"/"d"/"w"/"m"/"y", default being "m";
	                            ....................... Notes & learnings ....................
............................................................................................................................%>
<script>
	globFuncs.locSto = {
		set : function(name, value, expirationTime, timeUnits){
			switch(timeUnits) {
					case "min":
						var expiration = expirationTime * 1000 * 60;
						break;
					case "h":
						var expiration = expirationTime * 1000 * 60 * 60;
						break;
					case "d":
						var expiration = expirationTime * 1000 * 60 *60 * 24;
						break;
					case "w":
						var expiration = expirationTime * 1000 * 60 * 60 * 24 * 7;
						break;
					case "m":
						var expiration = expirationTime * 1000 * 60 * 60 * 24 * 30;
						break;
					case "y":
						var expiration = expirationTime * 1000 * 60 * 60 * 24 * 365;
						break;
					default:
						var expiration = expirationTime * 1000 * 60 * 60 * 24 * 30;
			}
			const record = {value: value, timestamp: new Date().getTime() + expiration}
			localStorage.setItem(name, JSON.stringify(record));
		},
		get : function(name){
			const record = JSON.parse(localStorage.getItem(name));
			if (!record) {
				console.log("That value doesn't exist")
				return null
			}
			if (new Date().getTime() > record.timestamp) {
				localStorage.removeItem(name)
				console.log("Alredy expired");
				return null
			}
			return record.value
		},
		remove : function(name){
			localStorage.removeItem(name)
		},
		clear: function(){
			localStorage.clear()
		}
	};
	globFuncs.cookie = {
		set : function(name, value, expirationTime, timeUnits){
			switch(timeUnits) {
					case "min":
						var max_age = expirationTime * 1000 * 60;
						break;
					case "h":
						var max_age = expirationTime * 1000 * 60 * 60;
						break;
					case "d":
						var max_age = expirationTime * 1000 * 60 *60 * 24;
						break;
					case "w":
						var max_age = expirationTime * 1000 * 60 * 60 * 24 * 7;
						break;
					case "m":
						var max_age = expirationTime * 1000 * 60 * 60 * 24 * 30;
						break;
					case "y":
						var max_age = expirationTime * 1000 * 60 * 60 * 24 * 365;
						break;
					default:
						var max_age = expirationTime * 1000 * 60 * 60 * 24 * 30;
			}
			const d = new Date();
      d.setTime(d.getTime() + (max_age));
      let expires = "expires="+ d.toUTCString();
      document.cookie = name + "=" + value + ";" + expires + ";path=/";
		}
	};
</script>